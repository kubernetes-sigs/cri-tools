name: critest dockershim
on: [push, pull_request]
jobs:
  #
  # Run CRI tests against dockershim
  #
  build-and-critest-dockershim:
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2019]
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Set Go binary path
        shell: bash
        run: |
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      - name: Cache go modules and build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            '%LocalAppData%\go-build' # Windows
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Checkout cri-tools for this commit
        uses: actions/checkout@v2
        with:
          path: ${{github.workspace}}/src/github.com/kubernetes-sigs/cri-tools

      - name: Install docker
        run: |
          hack/install-docker.sh
        working-directory: ${{ github.workspace }}/src/github.com/kubernetes-sigs/cri-tools

      - name: Build cri-tools on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          make
          sudo -E PATH=$PATH make install
        working-directory: ${{ github.workspace }}/src/github.com/kubernetes-sigs/cri-tools

      - name: Build cri-tools on Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          make
          make install
        working-directory: ${{ github.workspace }}/src/github.com/kubernetes-sigs/cri-tools

      - name: Build cri-dockerd on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo -E PATH=$PATH hack/install-cri-dockerd.sh
        working-directory: ${{ github.workspace }}/src/github.com/kubernetes-sigs/cri-tools

      - name: Build cri-dockerd on Windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          set -o errexit
          set -o nounset
          set -o pipefail

          git clone https://github.com/Mirantis/cri-dockerd $GOPATH/src/github.com/Mirantis/cri-dockerd
          cd $GOPATH/src/github.com/Mirantis/cri-dockerd/src
          go mod tidy

          # Need the flag for errors building on Windows
          # Ref: https://github.com/golang/go/issues/30674
          #      https://github.com/golang/go/issues/40795
          go install -buildmode=exe .
          mv $GOPATH/bin/cri-dockerd.exe /usr/local/bin
        working-directory: ${{ github.workspace }}/src/github.com/kubernetes-sigs/cri-tools

      - name: Run critest on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo -E PATH=$PATH make install.ginkgo
          sudo -E PATH=$PATH hack/run-dockershim-critest.sh
        working-directory: ${{ github.workspace }}/src/github.com/kubernetes-sigs/cri-tools

      - name: Run critest on Windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          set -o errexit
          set -o nounset
          set -o pipefail
          set -x

          export LANG=C
          export LC_ALL=C
          FOCUS="${FOCUS:-"Conformance"}"
          REPORT_DIR="${REPORT_DIR:-"c/_artifacts"}"
          mkdir -p "${REPORT_DIR}"

          # TODO: Skipping these tests because there are no manifests for windows/amd64
          SKIP="runtime should support execSync|runtime should support portforward|runtime should support starting container with log|runtime should support execSync with timeout|runtime should support removing running container|runtime should support port mapping with only container port|runtime should support creating container|runtime should support starting container with volume|runtime should support exec with tty=true and stdin=true|runtime should support set hostname|runtime should support removing stopped container|runtime should support removing created container|runtime should support running PodSandbox|runtime should support port mapping with host port and container port|runtime should support exec with tty=false and stdin=false|runtime should support DNS config|runtime should support attach|runtime should support listing container stats|runtime should support reopening container log|runtime should support stopping container|runtime should support starting container with volume when host path is a symlink|runtime should support removing PodSandbox|runtime should support stopping PodSandbox|runtime should support starting container"

          # Start dockershim first
          ep=npipe:////./pipe/dockershim
          /usr/local/bin/cri-dockerd --network-plugin="" --container-runtime-endpoint=${ep} &> "${REPORT_DIR}/dockerd-cri.log" &
          pid=$!

          # Wait a while for dockershim starting.
          sleep 10

          # Run cri test cases
          /usr/local/bin/critest --ginkgo.focus="${FOCUS}" --ginkgo.skip="${SKIP}" --report-dir="${REPORT_DIR}" --report-prefix="windows"

          ls ${REPORT_DIR}
          TEST_RC1=$?
          test $TEST_RC1 -ne 0 && cat ${REPORT_DIR}/dockerd-cri.log

          # TODO: Disabled as there are no manifests for windows/amd64
          # Run benchmark test cases
          # /usr/local/bin/critest -benchmark
          # TEST_RC2=$?
          # test $TEST_RC2 -ne 0 && cat ${REPORT_DIR}/dockerd-cri.log

          set -o errexit
          kill -9 $pid
          echo "DOCKER_CRI_DIR=$REPORT_DIR" >> $GITHUB_ENV

          exit ${TEST_RC1}

      - name: Upload docker logs from Windows
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-artifact@v1
        with:
          name: dockerd-${{ matrix.os }}-${{github.sha}}.log
          path: ${{env.DOCKER_CRI_DIR}}/dockerd-cri.log

      - name: Cleanup temp directory on Windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          echo "Cleanup temp directory ${{env.DOCKER_CRI_DIR}} created for cri tests"
          rm -rf ${{env.DOCKER_CRI_DIR}}

      - name: Dump docker logs from Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          mkdir -p ${{ github.workspace }}/logs
          sudo journalctl -eu docker | sudo tee ${{ github.workspace }}/logs/docker.log
          ls -atrl ${{ github.workspace }}/logs

      - name: Upload docker logs from Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v1
        with:
          name: logs
          path: logs
